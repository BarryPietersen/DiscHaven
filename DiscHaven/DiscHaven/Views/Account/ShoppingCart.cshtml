@model List<DiscHavenDataAccess.Models.CartLineItem>
@*the model will consist of a cart item collection and a cart summary objects*@
@{
    ViewBag.Title = "ShoppingCart";

    //these properties could be calculated in the db and packaged in a
    //ShoppingCart class which holds the item collection and summary detail
    float gstFactor = (float)ViewBag.GstFactor;
    double total = 0;
    Model.ForEach(c => total += c.LineTotal);
    double grandTotal = total * (1 + gstFactor);
    double gst = total * gstFactor;
}

@if (ViewBag.ErrorMessage != null)
{
    <h3 class="text-info">An error occurred during the processing</h3>
    <p class="is-invalid">@ViewBag.ErrorMessage</p>
}

<!-- shopping cart contents table----------------------------------------------------->
<div class="container-fluid">
    <div class="row text-center">
        <div class="col-12">
            <h4>Shopping Cart Contents</h4>
        </div>
        <hr>
    </div>
</div>

@if (Model.Count > 0)
{
    <div class="container-fluid">
        <div class="row">
            <table class="table table-hover table-striped table-responsive-sm">
                <thead>
                    <tr class="text-center">
                        <th scope="col">Date Added</th>
                        <th scope="col">Name</th>
                        <th scope="col">Price</th>
                        <th scope="col">Quantity</th>
                        <th scope="col">Total</th>
                        <th scope="col">Remove</th>
                    </tr>
                </thead>
                <tbody class="text-center" id="cartBody">
                    @foreach (var cartItem in Model)
                    {
                        <tr class="" id="@($"item{cartItem.ID}")">
                            <th scope="row">@cartItem.DateAdded.ToShortDateString()</th>
                            <td onclick="displayCartProductModal(@cartItem.FKProductID, @cartItem.ID)"><span class="cartspan">@cartItem.Name</span></td>
                            <td id="@($"price{cartItem.ID}")">@string.Format("{0:C}", cartItem.ItemPrice)</td>
                            <td><input type="number" class="input-group-sm" min="1" value="@cartItem.Quantity" onchange="updateCartItemQuantity(this, @cartItem.ID, @cartItem.FKProductID)" /></td>
                            <td id="@($"lineTotal{cartItem.ID}")">@string.Format("{0:C}", (cartItem.LineTotal))</td>
                            <td><i class="far fa-trash-alt cartspan" onclick="removeCartItem(@cartItem.ID)"></i></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="row mb-2">
            <div class="ml-auto w-50">
                <table class="table table-striped table-light">
                    <thead>
                        <tr class="text-center">
                            <th scope="col" class="p-0"></th>
                            <th scope="col" class="p-0">Totals</th>
                        </tr>
                    </thead>
                    <tbody class="text-center">
                        <tr class="">
                            <th scope="row" class="text-right">Price</th>
                            <td id="total">@string.Format("{0:C}", total)</td>
                        </tr>
                        <tr class="">
                            <th scope="row" class="text-right">Gst</th>
                            <td id="gst">@string.Format("{0:C}", gst)</td>
                        </tr>
                        <tr class="">
                            <th scope="row" class="text-right">Grand Total</th>
                            <td id="grandTotal">@string.Format("{0:C}", grandTotal)</td>
                        </tr>
                    </tbody>
                </table>
                <a href="@Url.Action("checkout", "account")" class="btn btn-outline-primary d-block w-50 ml-auto">Check Out <i class="fas fa-angle-double-right"></i></a>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center">There are currently no items in your shopping cart..better get shopping!</div>
}

<!-- Bootstrap Modal -->
<div class="modal fade" id="productModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">

        <div class="modal-content">

            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="centred-xy">
                <div id="mspinner" class="spinner" style="display:none"></div>
            </div>

            <div id="modalContent">
                <div class="modal-body">
                    <div class="card">
                        <img id="m_Image" src="#" alt="image not found" class="card-img-top">
                        <div class="card-body">
                            <h4 id="m_Title" class="card-title">title</h4>
                            <h6 class="pt-2"><b>Type: </b><span id="m_Type"></span></h6>
                            <div id="collapseDescription" class="collapse">
                                <p id="m_Description" class="card-text"></p>
                            </div>
                            <button class="btn btn-sm" data-toggle="collapse" data-target="#collapseDescription">about</button>
                            <h6 class="pt-2">RRP: <small id="m_RRP"></small></h6>
                            <h6 class="pt-2">Discount: <small id="m_Discount"></small></h6>
                            <h6 class="pt-2">Our Price: <small id="m_Price"></small></h6>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-info" id="m_Action" data-pid="" onclick="removeCartItem_Modal(this.getAttribute('data-pid')); ">Remove</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function updateCartItemQuantity(input, id, pid) {
        var qty = Math.floor(input.value);
        input.value = qty;

        if (qty < 1) {
            removeCartItem(id);
            return;
        }

        var http = new XMLHttpRequest();

        http.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {

                var obj = JSON.parse(this.responseText);
                if (obj.commandResult.ID > 0) {

                    if (qty > 0) {
                        //update the table row td elemets - total price
                        document.getElementById('navCartCount').innerHTML = obj.cartCount.toString();
                        var price = document.getElementById("price" + id).innerHTML.substr(1);
                        var total = document.getElementById("lineTotal" + id);
                        var t = (parseFloat(price) * parseFloat(qty)).toFixed(2);
                        total.innerHTML = '$' + t;

                        updateTotals();
                    }
                }
                else {
                    //display error message from json response
                    input.value = parseFloat(obj.qty);
                    popupInfo(false, obj.commandResult.ErrorMessage);
                    
                }
            }
        };

        http.ontimeout = function () {
            try {
                this.abort();
                popupWarning(false, "Request timed out. Consider adjusting your 'timeout' setting", "Timeout");
            }
            catch (e) {
                popupError(false, "Timeout Error: " + e.Message, "Timeout Error");
            }
        }

        http.onerror = function () {
            try {
                popupError(false,
                    "The following codes were received...<br/><br/>"
                    + "readyState: " + http.readyState + "<br/>"
                    + "status: " + http.status + " (" + http.statusText + ")", "Server Request Error");
            }
            catch (e) {
                popupError(false, "Server Request Error: " + e.Message, "Server Request Error");
            }
        }

        http.open('POST', 'http://localhost:52075/Account/UpdateCartItemQuantity?id=' + id + '&pid=' + pid + '&qty=' + qty, true);
        http.timeout = 3000;
        http.send();
    }

    function removeCartItem_Modal(pid)
    {
        removeCartItem(pid);
        var btn_Action = document.getElementById("m_Action");
        btn_Action.innerHTML = "Removed<i class='fa fa-check ml-1'></i>";
    }

    function removeCartItem(pid) {
        var http = new XMLHttpRequest();

        http.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {

                var obj = JSON.parse(this.responseText);

                if (obj.removed) {
                    document.getElementById('navCartCount').innerHTML = obj.cartCount.toString();
                    var tablerow = document.getElementById('item' + pid)
                    document.getElementById('cartBody').removeChild(tablerow);
                    updateTotals();
                    return true;
                }
                else {
                    //display error message from json response
                    alert(obj.commandResult.ErrorMessage);
                    return false;
                }
            }
        };

        http.open('POST', 'http://localhost:52075/Account/RemoveCartItem?id=' + pid, true);
        http.send();
    }

    //perform client side calculations and updates to the table rows and totals fields
    function updateTotals() {
        var newGst = 0;
        var newTotal = 0;
        var newGrand = 0;

        var gst = document.getElementById('gst');
        var total = document.getElementById('total');
        var grand = document.getElementById('grandTotal');

        var rows = document.getElementById('cartBody').children;

        var gstfac = parseFloat(gst.innerHTML.substr(1)) / parseFloat(total.innerHTML.substr(1));

        for (var i = 0; i < rows.length; i++) {
            newTotal += parseFloat(rows[i].children[2].innerHTML.substr(1)) * parseFloat(rows[i].children[3].children[0].value);
        }

        newGst = newTotal * gstfac;
        newGrand = newTotal + newGst;

        gst.innerHTML = "$" + newGst.toFixed(2);
        total.innerHTML = '$' + newTotal.toFixed(2);
        grand.innerHTML = '$' + newGrand.toFixed(2);
    }
</script>

